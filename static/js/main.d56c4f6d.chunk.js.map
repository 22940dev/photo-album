{"version":3,"sources":["Firebase/config.js","Firebase/context.js","Upload.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","storage","AuthContext","React","createContext","user","AuthProvider","children","useState","auth","currentUser","initializing","state","setState","onChange","useEffect","unsubscribe","onAuthStateChanged","useAuth","Provider","value","Upload","image","setImage","useContext","className","type","accept","e","reader","FileReader","file","target","files","onload","readyState","console","log","readAsDataURL","onImageChange","onClick","ref","email","child","name","put","then","alert","signOut","to","pathname","Home","uiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","credentialHelper","callbacks","signInSuccessWithAuthResult","style","marginBottom","firebaseAuth","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iRAIMA,G,YAAMC,IAASC,cAAc,CACjCC,OAAQC,0CACRC,WAAYD,oCACZE,YAAaF,2CACbG,UAAWH,oBACXI,cAAeJ,gCACfK,kBAAmBL,kBAGRM,EAAUT,IAASS,UAEjBV,ICZFW,EAAcC,IAAMC,cAAc,CAAEC,KAAM,OAoB1CC,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAlB9B,WAAO,IAAD,EACMC,oBAAS,WACjC,IAAMH,EAAOd,EAAIkB,OAAOC,YACxB,MAAO,CAAEC,cAAeN,EAAMA,WAHZ,mBACbO,EADa,KACNC,EADM,KAMpB,SAASC,EAAST,GAChBQ,EAAS,CAAEF,cAAc,EAAON,SAQlC,OALAU,qBAAU,WACR,IAAMC,EAAczB,EAAIkB,OAAOQ,mBAAmBH,GAClD,OAAO,kBAAME,OACZ,IAEIJ,EAIwBM,GAAvBP,EADoC,EACpCA,aAAcN,EADsB,EACtBA,KACtB,OAAIM,EAAqB,KAGvB,kBAACT,EAAYiB,SAAb,CAAsBC,MAAO,CAAEf,SAASE,I,OCkC7Bc,MAxDf,WAAmB,IAAD,EACUb,mBAAS,MADnB,mBACTc,EADS,KACFC,EADE,KAERlB,EAASmB,qBAAWtB,GAApBG,KA8BR,OACE,6BACIA,EAGA,4BAAQoB,UAAU,cAChB,6CACA,2BACEC,KAAK,OACLC,OAAO,yBACPb,SAAU,SAACc,IAtCC,SAACA,GACrB,IAAMC,EAAS,IAAIC,WACfC,EAAOH,EAAEI,OAAOC,MAAM,GACtBF,GACFF,EAAOK,OAAS,WACY,IAAtBL,EAAOM,aACTC,QAAQC,IAAIN,GACZR,EAASQ,KAIbF,EAAOS,cAAcV,EAAEI,OAAOC,MAAM,KAEpCV,EAAS,MA0BDgB,CAAcX,MAGlB,4BAAQY,QAAS,WAxBnBlB,EACiBrB,EAAQwC,IAAIpC,EAAKqC,OACRC,MAAMrB,EAAMsB,MAC/BC,IAAIvB,GAAOwB,MAAK,WACvBC,MAAM,+CAGRA,MAAM,mCAiBF,sBACA,6BACE,4BAAQP,QAAS,kBAAMjD,EAAIkB,OAAOuC,YAAlC,cAbJ,kBAAC,IAAD,CAAUC,GAAI,CAAEC,SAAU,S,yBCCnBC,MAnCf,WAAiB,IACP9C,EAASmB,qBAAWtB,GAApBG,KAEF+C,EAAW,CACfC,WAAY,QACZC,cAAe,CACb9D,IAASiB,KAAK8C,mBAAmBC,YACjChE,IAASiB,KAAKgD,kBAAkBD,aAElCE,iBAAkB,OAClBC,UAAW,CACTC,4BAA6B,kBAAM,KAGvC,OACE,4BAAQnC,UAAU,cACbpB,EACD,kBAAC,IAAD,CAAU4C,GAAI,CAAEC,SAAU,aAE1B,6BACE,wBACEW,MAAO,CACLC,aAAc,SAFlB,mBAQA,kBAAC,eAAD,CAAcV,SAAUA,EAAUW,aAAcvE,IAASiB,Y,QCRpDuD,MAnBf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,yBAAKvC,UAAU,OACb,2IAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwC,OAAK,EAACC,KAAK,UAAUC,UAAW9C,IACvC,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,IAAIC,UAAWhB,SCPzBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.d56c4f6d.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/auth\";\r\n\r\nconst app = firebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n});\r\n\r\nexport const storage = firebase.storage();\r\n\r\nexport default app;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport app from \"./config\";\r\n\r\nexport const AuthContext = React.createContext({ user: null });\r\n\r\nconst useAuth = () => {\r\n  const [state, setState] = useState(() => {\r\n    const user = app.auth().currentUser;\r\n    return { initializing: !user, user };\r\n  });\r\n\r\n  function onChange(user) {\r\n    setState({ initializing: false, user });\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = app.auth().onAuthStateChanged(onChange);\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  return state;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const { initializing, user } = useAuth();\r\n  if (initializing) return null;\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user }}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport \"./App.css\";\r\nimport app, { storage } from \"./Firebase/config\";\r\nimport { AuthContext } from \"./Firebase/context\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nfunction Upload() {\r\n  const [image, setImage] = useState(null);\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const onImageChange = (e) => {\r\n    const reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    if (file) {\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          console.log(file);\r\n          setImage(file);\r\n        }\r\n      };\r\n\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    } else {\r\n      setImage(null);\r\n    }\r\n  };\r\n\r\n  const uploadToFirebase = () => {\r\n    if (image) {\r\n      const storageRef = storage.ref(user.email);\r\n      const imageRef = storageRef.child(image.name);\r\n      imageRef.put(image).then(() => {\r\n        alert(\"Image uploaded successfully to Firebase.\");\r\n      });\r\n    } else {\r\n      alert(\"Please upload an image first.\");\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      {!user ? (\r\n        <Redirect to={{ pathname: \"/\" }} />\r\n      ) : (\r\n        <header className=\"App-header\">\r\n          <p>Upload a Photo</p>\r\n          <input\r\n            type=\"file\"\r\n            accept=\"image/x-png,image/jpeg\"\r\n            onChange={(e) => {\r\n              onImageChange(e);\r\n            }}\r\n          />\r\n          <button onClick={() => uploadToFirebase()}>Upload to Firebase</button>\r\n          <div>\r\n            <button onClick={() => app.auth().signOut()}>Sign Out</button>\r\n          </div>\r\n        </header>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Upload;\r\n","import React, { useContext } from \"react\";\r\nimport \"./App.css\";\r\nimport { AuthContext } from \"./Firebase/context\";\r\nimport { FirebaseAuth } from \"react-firebaseui\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction Home() {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const uiConfig = {\r\n    signInFlow: \"popup\",\r\n    signInOptions: [\r\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n      firebase.auth.EmailAuthProvider.PROVIDER_ID,\r\n    ],\r\n    credentialHelper: \"none\",\r\n    callbacks: {\r\n      signInSuccessWithAuthResult: () => false,\r\n    },\r\n  };\r\n  return (\r\n    <header className=\"App-header\">\r\n      {!!user ? (\r\n        <Redirect to={{ pathname: \"/upload\" }} />\r\n      ) : (\r\n        <div>\r\n          <h4\r\n            style={{\r\n              marginBottom: \"2rem\",\r\n            }}\r\n          >\r\n            Please Sign In.\r\n          </h4>\r\n\r\n          <FirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { AuthProvider } from \"./Firebase/context\";\nimport Upload from \"./Upload\";\nimport Home from \"./Home\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <div className=\"App\">\n          <p>\n            Welcome to Photo Album. This is a tutorial for Firebase Cloud\n            Storage and Authentication. Still in Progress.\n          </p>\n          <Switch>\n            <Route exact path=\"/upload\" component={Upload} />\n            <Route exact path=\"/\" component={Home} />\n          </Switch>\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}